{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/daveAnalyst/zindi-mhp-energy-prediction-2025/blob/master/zindi_mhp_dev.ipynb1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "562fd2ac",
      "metadata": {
        "id": "562fd2ac"
      },
      "source": [
        "# Zindi Micro-Hydropower Energy Load Prediction\n",
        "\n",
        "This notebook aims to predict daily energy consumption (kWh) per data user for Micro-Hydropower Plants (MHPs) in Kalam, Pakistan. We will use MHP sensor data and climate indicators to build a predictive model.\n",
        "\n",
        "**Objective:** Forecast total daily kWh per user for one month into the future.\n",
        "**Metric:** Root Mean Squared Error (RMSE)."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y_PALnKIZjqU",
        "outputId": "5c42cd4e-f45a-44ba-8885-48f7b70a5a07"
      },
      "id": "y_PALnKIZjqU",
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install -r requirements.txt\n",
        "# Or if requirements.txt is missing/outdated, install key ones:\n",
        "!pip install pandas openpyxl lightgbm matplotlib seaborn --upgrade"
      ],
      "metadata": {
        "collapsed": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4GzbsojfaNZi",
        "outputId": "d5afb1ef-ccd7-4810-a04a-cdbe712aabda"
      },
      "id": "4GzbsojfaNZi",
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[31mERROR: Could not open requirements file: [Errno 2] No such file or directory: 'requirements.txt'\u001b[0m\u001b[31m\n",
            "\u001b[0mRequirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
            "Collecting pandas\n",
            "  Downloading pandas-2.2.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (89 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m89.9/89.9 kB\u001b[0m \u001b[31m3.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: openpyxl in /usr/local/lib/python3.11/dist-packages (3.1.5)\n",
            "Requirement already satisfied: lightgbm in /usr/local/lib/python3.11/dist-packages (4.5.0)\n",
            "Collecting lightgbm\n",
            "  Downloading lightgbm-4.6.0-py3-none-manylinux_2_28_x86_64.whl.metadata (17 kB)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n",
            "Collecting matplotlib\n",
            "  Downloading matplotlib-3.10.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\n",
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.11/dist-packages (0.13.2)\n",
            "Requirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.0.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: et-xmlfile in /usr/local/lib/python3.11/dist-packages (from openpyxl) (2.0.0)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from lightgbm) (1.14.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.56.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (24.2)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.1.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n",
            "Downloading pandas-2.2.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (13.1 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.1/13.1 MB\u001b[0m \u001b[31m54.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading lightgbm-4.6.0-py3-none-manylinux_2_28_x86_64.whl (3.6 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.6/3.6 MB\u001b[0m \u001b[31m62.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading matplotlib-3.10.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (8.6 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m8.6/8.6 MB\u001b[0m \u001b[31m67.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: pandas, matplotlib, lightgbm\n",
            "  Attempting uninstall: pandas\n",
            "    Found existing installation: pandas 2.2.2\n",
            "    Uninstalling pandas-2.2.2:\n",
            "      Successfully uninstalled pandas-2.2.2\n",
            "  Attempting uninstall: matplotlib\n",
            "    Found existing installation: matplotlib 3.10.0\n",
            "    Uninstalling matplotlib-3.10.0:\n",
            "      Successfully uninstalled matplotlib-3.10.0\n",
            "  Attempting uninstall: lightgbm\n",
            "    Found existing installation: lightgbm 4.5.0\n",
            "    Uninstalling lightgbm-4.5.0:\n",
            "      Successfully uninstalled lightgbm-4.5.0\n",
            "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "google-colab 1.0.0 requires pandas==2.2.2, but you have pandas 2.2.3 which is incompatible.\u001b[0m\u001b[31m\n",
            "\u001b[0mSuccessfully installed lightgbm-4.6.0 matplotlib-3.10.1 pandas-2.2.3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import zipfile\n",
        "import shutil\n",
        "\n",
        "# Define path to data on Google Drive (adjust if your folder structure differs)\n",
        "DRIVE_DATA_PATH = '/content/drive/MyDrive/Zindi MHP Challenge/data'\n",
        "\n",
        "# Define path for data within Colab's runtime storage\n",
        "COLAB_DATA_PATH = '/content/data' # This is temporary storage\n",
        "\n",
        "# Create the target directory in Colab\n",
        "os.makedirs(COLAB_DATA_PATH, exist_ok=True)\n",
        "\n",
        "print(\"Unzipping Data.zip...\")\n",
        "try:\n",
        "    with zipfile.ZipFile(os.path.join(DRIVE_DATA_PATH, 'Data.zip'), 'r') as zip_ref:\n",
        "        zip_ref.extractall(COLAB_DATA_PATH)\n",
        "    print(\"Data.zip unzipped.\")\n",
        "except FileNotFoundError:\n",
        "    print(f\"ERROR: Data.zip not found at {os.path.join(DRIVE_DATA_PATH, 'Data.zip')}\")\n",
        "\n",
        "print(\"\\nUnzipping Climate Data.zip...\")\n",
        "try:\n",
        "    # Assuming Climate Data.zip contains the .xlsx file, maybe inside a folder\n",
        "    with zipfile.ZipFile(os.path.join(DRIVE_DATA_PATH, 'Climate Data.zip'), 'r') as zip_ref:\n",
        "        zip_ref.extractall(COLAB_DATA_PATH) # Extract directly into /content/data\n",
        "    print(\"Climate Data.zip unzipped. Check contents:\")\n",
        "    !ls -R {COLAB_DATA_PATH} # List contents recursively to find the .xlsx file\n",
        "    # You might need to move the .xlsx file out of a subfolder if one was created\n",
        "    !mv \"{COLAB_DATA_PATH}/Climate Data/Kalam Climate Data.xlsx\" \"{COLAB_DATA_PATH}/\"\n",
        "\n",
        "except FileNotFoundError:\n",
        "    print(f\"ERROR: Climate Data.zip not found at {os.path.join(DRIVE_DATA_PATH, 'Climate Data.zip')}\")\n",
        "\n",
        "print(\"\\nCopying SampleSubmission.csv...\")\n",
        "try:\n",
        "    shutil.copy(os.path.join(DRIVE_DATA_PATH, 'SampleSubmission.csv'), COLAB_DATA_PATH)\n",
        "    print(\"SampleSubmission.csv copied.\")\n",
        "except FileNotFoundError:\n",
        "     print(f\"ERROR: SampleSubmission.csv not found at {os.path.join(DRIVE_DATA_PATH, 'SampleSubmission.csv')}\")\n",
        "\n",
        "print(\"\\nFinal contents of Colab data directory:\")\n",
        "!ls {COLAB_DATA_PATH}\n",
        "\n",
        "# IMPORTANT: Set DATA_DIR for the rest of the notebook to use this Colab path\n",
        "DATA_DIR_FOR_NOTEBOOK = COLAB_DATA_PATH"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "xQUT5aaaakIL",
        "outputId": "f8cedfdd-be92-466f-8f0d-31b0077714a0"
      },
      "id": "xQUT5aaaakIL",
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Unzipping Data.zip...\n",
            "Data.zip unzipped.\n",
            "\n",
            "Unzipping Climate Data.zip...\n",
            "Climate Data.zip unzipped. Check contents:\n",
            "/content/data:\n",
            "'Climate Data'\t Data.csv   __MACOSX\n",
            "\n",
            "'/content/data/Climate Data':\n",
            "'Correlation Matrix.png'   'snow with MHPs.jpg'\n",
            "'Kalam Climate Data.xlsx'  'temperature with MHPs.jpg'\n",
            "\n",
            "/content/data/__MACOSX:\n",
            "\n",
            "Copying SampleSubmission.csv...\n",
            "SampleSubmission.csv copied.\n",
            "\n",
            "Final contents of Colab data directory:\n",
            "'Climate Data'\t Data.csv  'Kalam Climate Data.xlsx'   __MACOSX   SampleSubmission.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "id": "60f49b94",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "60f49b94",
        "outputId": "6a47b35a-fa70-4034-f5c5-9e3a562c2a2d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Libraries imported and settings configured.\n",
            "Data directory set to: data\n",
            "Available plotting styles: ['Solarize_Light2', '_classic_test_patch', '_mpl-gallery', '_mpl-gallery-nogrid', 'bmh', 'classic', 'dark_background', 'fast', 'fivethirtyeight', 'ggplot', 'grayscale', 'petroff10', 'seaborn-v0_8', 'seaborn-v0_8-bright', 'seaborn-v0_8-colorblind', 'seaborn-v0_8-dark', 'seaborn-v0_8-dark-palette', 'seaborn-v0_8-darkgrid', 'seaborn-v0_8-deep', 'seaborn-v0_8-muted', 'seaborn-v0_8-notebook', 'seaborn-v0_8-paper', 'seaborn-v0_8-pastel', 'seaborn-v0_8-poster', 'seaborn-v0_8-talk', 'seaborn-v0_8-ticks', 'seaborn-v0_8-white', 'seaborn-v0_8-whitegrid', 'tableau-colorblind10']\n"
          ]
        }
      ],
      "source": [
        "# Basic libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import math # For sqrt\n",
        "import os\n",
        "\n",
        "# Modeling\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_squared_error\n",
        "import lightgbm as lgb\n",
        "\n",
        "# Settings\n",
        "SEED = 42\n",
        "np.random.seed(SEED)\n",
        "DATA_DIR = 'data' # Set the path to your data directory\n",
        "\n",
        "# Ensure plots are displayed inline and set a style\n",
        "%matplotlib inline\n",
        "# Use a style that's likely available - adjust if needed\n",
        "plt.style.use('seaborn-v0_8-darkgrid')\n",
        "# If the above fails, try: plt.style.use('seaborn-darkgrid') or plt.style.use('ggplot')\n",
        "\n",
        "print(\"Libraries imported and settings configured.\")\n",
        "print(f\"Data directory set to: {DATA_DIR}\")\n",
        "print(f\"Available plotting styles: {plt.style.available}\") # Optional: see available styles"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "# ---- IMPORTANT: SET THIS CORRECTLY ----\n",
        "# Option 1: If you unzipped/copied data to Colab runtime storage\n",
        "DATA_DIR = '/content/data'\n",
        "# Option 2: If you are reading directly from Google Drive (potentially slower)\n",
        "# DATA_DIR = '/content/drive/MyDrive/Zindi MHP Challenge/data' # Adjust path if needed\n",
        "# --------------------------------------\n",
        "\n",
        "print(f\"Using DATA_DIR: {DATA_DIR}\")\n",
        "\n",
        "# Check 1: Does DATA_DIR exist?\n",
        "print(f\"\\nChecking existence of DATA_DIR...\")\n",
        "if not os.path.exists(DATA_DIR):\n",
        "    print(f\"--- ERROR ---: Directory '{DATA_DIR}' does NOT exist!\")\n",
        "    print(\"Action: Ensure you have run the Drive mount AND the data unzipping/copying cell correctly in this session.\")\n",
        "else:\n",
        "    print(f\"Directory '{DATA_DIR}' exists.\")\n",
        "\n",
        "    # Check 2: List files in DATA_DIR (Check names and capitalization!)\n",
        "    print(f\"\\nFiles present in '{DATA_DIR}':\")\n",
        "    !ls -lh \"{DATA_DIR}\" # Use shell command for clear listing\n",
        "\n",
        "    # Check 3: Verify specific expected files\n",
        "    expected_files = ['Data.csv', 'Kalam Climate Data.xlsx', 'SampleSubmission.csv']\n",
        "    print(\"\\nChecking for expected files:\")\n",
        "    all_found = True\n",
        "    for f_name in expected_files:\n",
        "        f_path = os.path.join(DATA_DIR, f_name)\n",
        "        if os.path.exists(f_path):\n",
        "            print(f\"  [ OK ] Found: {f_name}\")\n",
        "        else:\n",
        "            print(f\"  [FAIL] MISSING: {f_name} at path {f_path}\")\n",
        "            all_found = False\n",
        "    if not all_found:\n",
        "        print(\"--- ERROR ---: One or more required data files are missing from DATA_DIR.\")\n",
        "        print(\"Action: Re-run the data unzipping/copying cell, checking its output for errors.\")\n",
        "    else:\n",
        "        print(\"All expected files seem to be present.\")\n",
        "\n",
        "# Check 4: Ensure openpyxl is installed (relevant for Excel)\n",
        "print(\"\\nChecking for openpyxl installation...\")\n",
        "try:\n",
        "    import openpyxl\n",
        "    print(\"  [ OK ] openpyxl is installed.\")\n",
        "except ImportError:\n",
        "    print(\"  [FAIL] openpyxl is NOT installed.\")\n",
        "    print(\"Action: Run '!pip install openpyxl' in a cell.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "bi7Syey5eF5a",
        "outputId": "a0689e6e-3669-4347-f40a-4548e40d4cc2"
      },
      "id": "bi7Syey5eF5a",
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Using DATA_DIR: /content/data\n",
            "\n",
            "Checking existence of DATA_DIR...\n",
            "Directory '/content/data' exists.\n",
            "\n",
            "Files present in '/content/data':\n",
            "total 2.8G\n",
            "drwxr-xr-x 2 root root 4.0K Apr  5 14:48 'Climate Data'\n",
            "-rw-r--r-- 1 root root 2.8G Apr  5 14:48  Data.csv\n",
            "-rw-r--r-- 1 root root 735K Apr  5 14:48 'Kalam Climate Data.xlsx'\n",
            "drwxr-xr-x 2 root root 4.0K Apr  5 14:48  __MACOSX\n",
            "-rw------- 1 root root 260K Apr  5 14:48  SampleSubmission.csv\n",
            "\n",
            "Checking for expected files:\n",
            "  [ OK ] Found: Data.csv\n",
            "  [ OK ] Found: Kalam Climate Data.xlsx\n",
            "  [ OK ] Found: SampleSubmission.csv\n",
            "All expected files seem to be present.\n",
            "\n",
            "Checking for openpyxl installation...\n",
            "  [ OK ] openpyxl is installed.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import os\n",
        "\n",
        "# --- Use the SAME DATA_DIR as verified in Step 1 ---\n",
        "DATA_DIR = '/content/data' # Or your Drive path\n",
        "# ----------------------------------------------------\n",
        "\n",
        "print(\"--- Verifying Column Names ---\")\n",
        "\n",
        "# Check CSV Columns\n",
        "try:\n",
        "    print(\"\\nChecking Data.csv headers...\")\n",
        "    csv_path = os.path.join(DATA_DIR, 'Data.csv')\n",
        "    # Load only 5 rows, use engine='python' if C engine failed before\n",
        "    csv_head = pd.read_csv(csv_path, nrows=5, engine='python')\n",
        "    print(f\"Columns found in Data.csv: {csv_head.columns.tolist()}\")\n",
        "    # --->>> CONFIRM: Are 'date_time' and 'Source' exactly as expected? <<<---\n",
        "except Exception as e:\n",
        "    print(f\"ERROR reading Data.csv header: {e}\")\n",
        "\n",
        "# Check Excel Columns\n",
        "try:\n",
        "    print(\"\\nChecking Kalam Climate Data.xlsx headers...\")\n",
        "    excel_path = os.path.join(DATA_DIR, 'Kalam Climate Data.xlsx')\n",
        "    excel_head = pd.read_excel(excel_path, nrows=5) # Reads first sheet by default\n",
        "    print(f\"Columns found in Kalam Climate Data.xlsx: {excel_head.columns.tolist()}\")\n",
        "    # --->>> CONFIRM: Is 'Date_Time' exactly as expected? <<<---\n",
        "    # Let's also see the format of the date column\n",
        "    date_col_name = 'Date_Time' # Use the actual column name found\n",
        "    if date_col_name in excel_head.columns:\n",
        "         print(f\"Sample values in Excel column '{date_col_name}':\")\n",
        "         print(excel_head[date_col_name].head())\n",
        "    else:\n",
        "         print(f\"Warning: Column '{date_col_name}' not found in Excel header check.\")\n",
        "\n",
        "except Exception as e:\n",
        "    print(f\"ERROR reading Kalam Climate Data.xlsx header: {e}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "hOcFuzH1ebLQ",
        "outputId": "4ea268bd-f10d-49ef-921d-1813ef28848d"
      },
      "id": "hOcFuzH1ebLQ",
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Verifying Column Names ---\n",
            "\n",
            "Checking Data.csv headers...\n",
            "Columns found in Data.csv: ['date_time', 'v_red', 'current', 'power_factor', 'kwh', 'Source', 'v_blue', 'v_yellow', 'consumer_device_9', 'consumer_device_x']\n",
            "\n",
            "Checking Kalam Climate Data.xlsx headers...\n",
            "Columns found in Kalam Climate Data.xlsx: ['Date Time', 'Temperature (°C)', 'Dewpoint Temperature (°C)', 'U Wind Component (m/s)', 'V Wind Component (m/s)', 'Total Precipitation (mm)', 'Snowfall (mm)', 'Snow Cover (%)']\n",
            "Warning: Column 'Date_Time' not found in Excel header check.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c02b6671",
      "metadata": {
        "id": "c02b6671"
      },
      "source": [
        "## 2. Load Data\n",
        "\n",
        "Load the datasets:\n",
        "1.  **MHP Data:** `Data.csv` contains the 5-minute interval sensor readings (voltage, current, kWh, etc.). We anticipate the timestamp column is named `date_time`.\n",
        "2.  **Climate Data:** `Kalam Climate Data.xlsx` contains climate indicators (temperature, precipitation, etc.). This is an Excel file.\n",
        "3.  **Sample Submission:** `SampleSubmission.csv` defines the required prediction format and IDs for the test set.\n",
        "\n",
        "*Note: Reading Excel files requires the `openpyxl` library. Install it if needed (`pip install openpyxl`). Reading the MHP CSV might require `engine='python'` if the default C engine fails.*"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "id": "46194803",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "46194803",
        "outputId": "e7f39d87-773f-4211-c217-6d013a932e67"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loading data with verified column names...\n",
            "\n",
            "[0.0s] Attempting to load MHP structure from: /content/data/Data.csv\n",
            "Loading only columns: ['date_time', 'Source', 'kwh']\n",
            "[66.5s] Structure loaded for Data.csv. Size: (39147559, 3)\n",
            "[66.5s] Converting MHP date column ('date_time')...\n",
            "[81.7s] MHP date converted.\n",
            "[81.7s] Loaded and initially processed: Data.csv\n",
            "\n",
            "[81.7s] Attempting to load Excel structure from: /content/data/Kalam Climate Data.xlsx\n",
            "[83.8s] Structure loaded for Kalam Climate Data.xlsx. Size: (12228, 8)\n",
            "Original Excel columns: ['Date Time', 'Temperature (°C)', 'Dewpoint Temperature (°C)', 'U Wind Component (m/s)', 'V Wind Component (m/s)', 'Total Precipitation (mm)', 'Snowfall (mm)', 'Snow Cover (%)']\n",
            "[83.8s] Renaming Excel columns...\n",
            "Columns after renaming: ['date_time_excel', 'temperature', 'dew_point', 'u_wind', 'v_wind', 'precipitation', 'Snowfall (mm)', 'Snow Cover (%)']\n",
            "[83.8s] Calculating wind speed magnitude...\n",
            "Wind speed calculated.\n",
            "[83.8s] Converting Excel date column ('date_time_excel')...\n",
            "[83.8s] Excel date converted.\n",
            "[83.8s] Loaded and initially processed: Kalam Climate Data.xlsx\n",
            "\n",
            "[83.8s] Attempting to load sample submission from: /content/data/SampleSubmission.csv\n",
            "[83.8s] Successfully loaded: SampleSubmission.csv\n",
            "\n",
            "[83.8s] All data loaded successfully.\n",
            "\n",
            "--- MHP Data Info (Post-Processing) ---\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 39147559 entries, 0 to 39147558\n",
            "Data columns (total 3 columns):\n",
            " #   Column     Dtype         \n",
            "---  ------     -----         \n",
            " 0   timestamp  datetime64[ns]\n",
            " 1   user_id    object        \n",
            " 2   kwh        float64       \n",
            "dtypes: datetime64[ns](1), float64(1), object(1)\n",
            "memory usage: 896.0+ MB\n",
            "\n",
            "--- Climate Data Info (Post-Processing) ---\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 12228 entries, 0 to 12227\n",
            "Data columns (total 5 columns):\n",
            " #   Column         Non-Null Count  Dtype         \n",
            "---  ------         --------------  -----         \n",
            " 0   timestamp      12228 non-null  datetime64[ns]\n",
            " 1   temperature    12228 non-null  float64       \n",
            " 2   dew_point      12228 non-null  float64       \n",
            " 3   wind_speed     12228 non-null  float64       \n",
            " 4   precipitation  12228 non-null  float64       \n",
            "dtypes: datetime64[ns](1), float64(4)\n",
            "memory usage: 477.8 KB\n",
            "\n",
            "--- Sample Submission Head ---\n",
            "                                          ID  kwh\n",
            "0  2024-09-24_consumer_device_12_data_user_1    0\n",
            "1  2024-09-25_consumer_device_12_data_user_1    0\n",
            "2  2024-09-26_consumer_device_12_data_user_1    0\n",
            "3  2024-09-27_consumer_device_12_data_user_1    0\n",
            "4  2024-09-28_consumer_device_12_data_user_1    0\n"
          ]
        }
      ],
      "source": [
        "# Cell 4: Load Data (Revised with Correct Column Names)\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np # Make sure numpy is imported\n",
        "import os\n",
        "import time\n",
        "\n",
        "# --- Use the SAME DATA_DIR as verified previously ---\n",
        "# Ensure this is set correctly for your Colab environment\n",
        "DATA_DIR = '/content/data' # Or your Drive path: '/content/drive/MyDrive/Zindi MHP Challenge/data'\n",
        "# ----------------------------------------------------\n",
        "\n",
        "print(\"Loading data with verified column names...\")\n",
        "start_time = time.time()\n",
        "\n",
        "try:\n",
        "    # --- Load MHP Data (CSV) ---\n",
        "    mhp_filename = 'Data.csv'\n",
        "    mhp_path = os.path.join(DATA_DIR, mhp_filename)\n",
        "    print(f\"\\n[{time.time() - start_time:.1f}s] Attempting to load MHP structure from: {mhp_path}\")\n",
        "\n",
        "    # Columns verified as correct in Data.csv\n",
        "    mhp_cols_to_load = ['date_time', 'Source', 'kwh']\n",
        "    print(f\"Loading only columns: {mhp_cols_to_load}\")\n",
        "\n",
        "    mhp_data_raw = pd.read_csv(\n",
        "        mhp_path,\n",
        "        usecols=mhp_cols_to_load,\n",
        "        #engine='python'  Keep if C engine failed\n",
        "    )\n",
        "    print(f\"[{time.time() - start_time:.1f}s] Structure loaded for {mhp_filename}. Size: {mhp_data_raw.shape}\")\n",
        "\n",
        "    # Convert date column AFTER loading\n",
        "    print(f\"[{time.time() - start_time:.1f}s] Converting MHP date column ('date_time')...\")\n",
        "    mhp_data_raw['timestamp'] = pd.to_datetime(mhp_data_raw['date_time'], errors='coerce')\n",
        "    if mhp_data_raw['timestamp'].isnull().any():\n",
        "        print(\"Warning: Some MHP date conversions failed (resulted in NaT).\")\n",
        "    mhp_data_raw.drop(columns=['date_time'], inplace=True) # Drop original string column\n",
        "    print(f\"[{time.time() - start_time:.1f}s] MHP date converted.\")\n",
        "\n",
        "    # Rename user ID column (verified as 'Source')\n",
        "    mhp_data_raw.rename(columns={'Source': 'user_id'}, inplace=True)\n",
        "    print(f\"[{time.time() - start_time:.1f}s] Loaded and initially processed: {mhp_filename}\")\n",
        "\n",
        "\n",
        "    # --- Load Climate Data (Excel) ---\n",
        "    climate_filename = 'Kalam Climate Data.xlsx'\n",
        "    climate_path = os.path.join(DATA_DIR, climate_filename)\n",
        "    print(f\"\\n[{time.time() - start_time:.1f}s] Attempting to load Excel structure from: {climate_path}\")\n",
        "    # Load full Excel structure first, do not parse dates yet\n",
        "    climate_data_raw = pd.read_excel(climate_path)\n",
        "    print(f\"[{time.time() - start_time:.1f}s] Structure loaded for {climate_filename}. Size: {climate_data_raw.shape}\")\n",
        "    print(f\"Original Excel columns: {climate_data_raw.columns.tolist()}\") # Show original names\n",
        "\n",
        "    # --- Rename Excel Columns to Simpler Names ---\n",
        "    # Use the EXACT names found in the verification step\n",
        "    print(f\"[{time.time() - start_time:.1f}s] Renaming Excel columns...\")\n",
        "    climate_rename_map = {\n",
        "        'Date Time': 'date_time_excel', # Temporary name for date\n",
        "        'Temperature (°C)': 'temperature',\n",
        "        'Dewpoint Temperature (°C)': 'dew_point',\n",
        "        'U Wind Component (m/s)': 'u_wind',\n",
        "        'V Wind Component (m/s)': 'v_wind',\n",
        "        'Total Precipitation (mm)': 'precipitation'\n",
        "        # Add other columns here if needed later, e.g., 'Snowfall (mm)': 'snowfall'\n",
        "    }\n",
        "    # Check if all expected columns exist before renaming\n",
        "    missing_cols = [col for col in climate_rename_map.keys() if col not in climate_data_raw.columns]\n",
        "    if missing_cols:\n",
        "         raise KeyError(f\"Missing expected columns in Excel file: {missing_cols}\")\n",
        "\n",
        "    climate_data_raw.rename(columns=climate_rename_map, inplace=True)\n",
        "    print(f\"Columns after renaming: {climate_data_raw.columns.tolist()}\")\n",
        "\n",
        "    # --- Calculate Wind Speed Magnitude ---\n",
        "    print(f\"[{time.time() - start_time:.1f}s] Calculating wind speed magnitude...\")\n",
        "    climate_data_raw['wind_speed'] = np.sqrt(climate_data_raw['u_wind']**2 + climate_data_raw['v_wind']**2)\n",
        "    # Drop original U/V components if no longer needed\n",
        "    # climate_data_raw.drop(columns=['u_wind', 'v_wind'], inplace=True)\n",
        "    print(f\"Wind speed calculated.\")\n",
        "\n",
        "    # --- Convert Date Column AFTER Loading and Renaming ---\n",
        "    print(f\"[{time.time() - start_time:.1f}s] Converting Excel date column ('date_time_excel')...\")\n",
        "    climate_data_raw['timestamp'] = pd.to_datetime(climate_data_raw['date_time_excel'], errors='coerce')\n",
        "    if climate_data_raw['timestamp'].isnull().any():\n",
        "        print(\"Warning: Some Excel date conversions failed (resulted in NaT).\")\n",
        "    # Drop original date column AFTER successful conversion\n",
        "    climate_data_raw.drop(columns=['date_time_excel'], inplace=True)\n",
        "    print(f\"[{time.time() - start_time:.1f}s] Excel date converted.\")\n",
        "    print(f\"[{time.time() - start_time:.1f}s] Loaded and initially processed: {climate_filename}\")\n",
        "\n",
        "\n",
        "    # --- Load Sample Submission (CSV) ---\n",
        "    sample_sub_filename = 'SampleSubmission.csv'\n",
        "    sample_sub_path = os.path.join(DATA_DIR, sample_sub_filename)\n",
        "    print(f\"\\n[{time.time() - start_time:.1f}s] Attempting to load sample submission from: {sample_sub_path}\")\n",
        "    sample_sub = pd.read_csv(sample_sub_path)\n",
        "    print(f\"[{time.time() - start_time:.1f}s] Successfully loaded: {sample_sub_filename}\")\n",
        "\n",
        "    total_time = time.time() - start_time\n",
        "    print(f\"\\n[{total_time:.1f}s] All data loaded successfully.\")\n",
        "\n",
        "# --- Keep the SAME except blocks as before ---\n",
        "except FileNotFoundError as e:\n",
        "    print(f\"\\n--- ERROR: File Not Found ---\")\n",
        "    print(f\"{e}\")\n",
        "    print(f\"Please ensure files are directly in the '{DATA_DIR}' directory confirmed in Step 1.\")\n",
        "    raise\n",
        "except ImportError as e:\n",
        "     print(f\"\\n--- ERROR: Missing Library ---\")\n",
        "     print(f\"{e}\")\n",
        "     print(\"Failed loading Excel file. Ensure openpyxl is installed (`!pip install openpyxl`).\")\n",
        "     raise\n",
        "except ValueError as e:\n",
        "    print(f\"\\n--- ERROR: Value Error during loading/parsing ---\")\n",
        "    print(f\"{e}\")\n",
        "    print(\"This might be due to an incorrect column name during processing. Verify names from Step 2.\")\n",
        "    raise\n",
        "except KeyError as e:\n",
        "    print(f\"\\n--- ERROR: Key Error ---\")\n",
        "    print(f\"{e}\")\n",
        "    print(\"This usually means a specified column name was not found during renaming or processing. Verify names from Step 2.\")\n",
        "    raise\n",
        "except Exception as e:\n",
        "     print(f\"\\n--- ERROR: An unexpected error occurred during data loading ---\")\n",
        "     print(f\"{e}\")\n",
        "     raise\n",
        "\n",
        "# --- Display Info (Optional but recommended) ---\n",
        "# Select only the columns we will actually use going forward to keep info clean\n",
        "mhp_final_cols = ['timestamp', 'user_id', 'kwh']\n",
        "climate_final_cols = ['timestamp', 'temperature', 'dew_point', 'wind_speed', 'precipitation'] # Add others like 'snowfall' if needed\n",
        "\n",
        "if 'mhp_data_raw' in locals():\n",
        "    print(\"\\n--- MHP Data Info (Post-Processing) ---\")\n",
        "    mhp_data_raw[mhp_final_cols].info() # Show info only for relevant columns\n",
        "if 'climate_data_raw' in locals():\n",
        "    print(\"\\n--- Climate Data Info (Post-Processing) ---\")\n",
        "    climate_data_raw[climate_final_cols].info() # Show info only for relevant columns\n",
        "if 'sample_sub' in locals():\n",
        "    print(\"\\n--- Sample Submission Head ---\")\n",
        "    print(sample_sub.head())"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f2115812",
      "metadata": {
        "id": "f2115812"
      },
      "source": [
        "## 3. Data Preprocessing and Aggregation\n",
        "\n",
        "The MHP data is recorded at 5-minute intervals, but the prediction target is daily kWh per user. Climate data might also be at a finer granularity than daily.\n",
        "\n",
        "We need to:\n",
        "1.  Aggregate the MHP `kwh` readings to get the total daily sum for each `user_id`.\n",
        "2.  Aggregate the climate data to daily statistics (e.g., mean temperature, total precipitation).\n",
        "3.  Merge the aggregated daily MHP data with the aggregated daily climate data.\n",
        "4.  Handle any missing values that might arise from the merge or exist in the original data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "id": "c2981e61",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "c2981e61",
        "outputId": "be4cdaa4-3dcc-4f26-d120-15bca5b992dd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Aggregating data to daily level...\n",
            "\n",
            "[14.7s] Grouping MHP data by user_id and date...\n",
            "[26.0s] MHP aggregation complete.\n",
            "Aggregated MHP data shape: (136409, 3)\n",
            "Aggregated Daily kWh per User Head:\n",
            "                          user_id       date  daily_kwh\n",
            "0  consumer_device_10_data_user_1 2024-07-22   0.024330\n",
            "1  consumer_device_10_data_user_1 2024-07-23   0.103560\n",
            "2  consumer_device_10_data_user_1 2024-07-24   0.137543\n",
            "3  consumer_device_10_data_user_1 2024-07-25   0.121011\n",
            "4  consumer_device_10_data_user_1 2024-07-26   0.000000\n",
            "\n",
            "[26.0s] Aggregating climate data...\n",
            "[26.0s] Climate aggregation complete.\n",
            "Aggregated climate data shape: (511, 5)\n",
            "Columns after renaming: {daily_climate.columns.tolist()}\n",
            "Aggregated Daily Climate Head:\n",
            "        date  temp_mean  dew_point_mean  wind_speed_mean  precip_sum\n",
            "0 2023-06-03   1.860280       -3.348664         0.680343    0.004557\n",
            "1 2023-06-04   3.992740       -1.905203         0.672389    0.024096\n",
            "2 2023-06-05   4.794523       -3.781657         0.679359    0.011580\n",
            "3 2023-06-06   6.304390       -4.670615         0.574538    0.008914\n",
            "4 2023-06-07   7.003922       -3.965763         0.640492    0.008649\n",
            "\n",
            "[26.0s] Merging aggregated daily MHP and climate data...\n",
            "[26.1s] Merge complete. Initial merged shape: (136409, 7)\n",
            "\n",
            "[26.1s] Checking NaNs before fill:\n",
            "user_id            0\n",
            "date               0\n",
            "daily_kwh          0\n",
            "temp_mean          0\n",
            "dew_point_mean     0\n",
            "wind_speed_mean    0\n",
            "precip_sum         0\n",
            "dtype: int64\n",
            "\n",
            "[26.2s] FillNA complete. NaNs remaining: 0\n",
            "\n",
            "[26.2s] Cell 6 processing finished.\n",
            "\n",
            "--- Merged & Cleaned Training Data Head ---\n",
            "                          user_id       date  daily_kwh  temp_mean  \\\n",
            "0  consumer_device_10_data_user_1 2024-07-22   0.024330  14.719596   \n",
            "1  consumer_device_10_data_user_1 2024-07-23   0.103560  13.217268   \n",
            "2  consumer_device_10_data_user_1 2024-07-24   0.137543  12.462190   \n",
            "3  consumer_device_10_data_user_1 2024-07-25   0.121011  13.867551   \n",
            "4  consumer_device_10_data_user_1 2024-07-26   0.000000  15.572609   \n",
            "\n",
            "   dew_point_mean  wind_speed_mean  precip_sum  \n",
            "0        8.280669         0.439644    0.073049  \n",
            "1        9.862700         0.547125    0.121921  \n",
            "2        9.865658         0.656740    0.119984  \n",
            "3        8.973798         0.661945    0.034283  \n",
            "4        9.434734         0.788089    0.006961  \n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-5-1e8fee3ca695>:92: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
            "  df_train_full.fillna(method='ffill', inplace=True)\n",
            "<ipython-input-5-1e8fee3ca695>:93: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
            "  df_train_full.fillna(method='bfill', inplace=True)\n"
          ]
        }
      ],
      "source": [
        "# Cell 6: Data Preprocessing and Aggregation (Corrected Syntax)\n",
        "\n",
        "print(\"Aggregating data to daily level...\")\n",
        "agg_start_time = time.time() # Start timer for aggregation\n",
        "\n",
        "# --- MHP Data Aggregation ---\n",
        "# Ensure required columns exist from Cell 4 processing\n",
        "if 'timestamp' not in mhp_data_raw.columns: raise KeyError(\"Column 'timestamp' not found in mhp_data_raw.\")\n",
        "if 'user_id' not in mhp_data_raw.columns: raise KeyError(\"Column 'user_id' not found in mhp_data_raw.\")\n",
        "if 'kwh' not in mhp_data_raw.columns: raise KeyError(\"Column 'kwh' not found in mhp_data_raw.\")\n",
        "\n",
        "mhp_data = mhp_data_raw.copy()\n",
        "# Extract date from the timestamp\n",
        "mhp_data['date'] = mhp_data['timestamp'].dt.date\n",
        "\n",
        "# Group by the user ID (already named 'user_id') and the date, then sum the kWh for that day\n",
        "print(f\"\\n[{time.time() - agg_start_time:.1f}s] Grouping MHP data by user_id and date...\")\n",
        "# This can be memory intensive for 40M rows. Monitor Colab RAM.\n",
        "daily_kwh = mhp_data.groupby(['user_id', 'date'])['kwh'].sum().reset_index()\n",
        "print(f\"[{time.time() - agg_start_time:.1f}s] MHP aggregation complete.\")\n",
        "daily_kwh.rename(columns={'kwh': 'daily_kwh'}, inplace=True)\n",
        "# Convert date back to datetime object for merging and feature engineering\n",
        "daily_kwh['date'] = pd.to_datetime(daily_kwh['date'])\n",
        "print(f\"Aggregated MHP data shape: {daily_kwh.shape}\")\n",
        "print(\"Aggregated Daily kWh per User Head:\")\n",
        "print(daily_kwh.head())\n",
        "\n",
        "\n",
        "# --- Climate Data Aggregation (Using simplified names from Cell 4) ---\n",
        "# --- Climate Data Aggregation (Using simplified names from Cell 4 - CORRECTED .agg() call) ---\n",
        "# Ensure required columns exist\n",
        "if 'timestamp' not in climate_data_raw.columns: raise KeyError(\"Column 'timestamp' not found in climate_data_raw.\")\n",
        "\n",
        "climate_data = climate_data_raw.copy()\n",
        "# Extract date from the timestamp\n",
        "climate_data['date'] = climate_data['timestamp'].dt.date\n",
        "\n",
        "# Define the columns to aggregate and the aggregation function\n",
        "climate_agg_dict = {\n",
        "    'temperature': 'mean',\n",
        "    'dew_point': 'mean',\n",
        "    'wind_speed': 'mean',\n",
        "    'precipitation': 'sum'\n",
        "    # Add 'u_wind':'mean', 'v_wind':'mean' if you want to keep daily components\n",
        "}\n",
        "# Check if needed columns exist in climate_data before aggregation\n",
        "required_climate_cols = list(climate_agg_dict.keys())\n",
        "missing_climate_cols = [col for col in required_climate_cols if col not in climate_data.columns]\n",
        "if missing_climate_cols:\n",
        "    raise KeyError(f\"Missing required climate columns for aggregation: {missing_climate_cols}. Check Cell 4 processing.\")\n",
        "\n",
        "print(f\"\\n[{time.time() - agg_start_time:.1f}s] Aggregating climate data...\")\n",
        "\n",
        "# --- CORRECTED .agg() call ---\n",
        "# Pass the dictionary directly as the argument\n",
        "daily_climate = climate_data.groupby('date').agg(climate_agg_dict).reset_index()\n",
        "\n",
        "# Rename columns to include the aggregation type (e.g., temp_mean) - important!\n",
        "# Create the names expected by later cells (e.g., 'temp_mean', not 'temperature_mean')\n",
        "rename_map = {\n",
        "    'temperature': 'temp_mean',\n",
        "    'dew_point': 'dew_point_mean',\n",
        "    'wind_speed': 'wind_speed_mean',\n",
        "    'precipitation': 'precip_sum'\n",
        "}\n",
        "# Only rename columns that were actually aggregated\n",
        "rename_map = {k: v for k, v in rename_map.items() if k in daily_climate.columns}\n",
        "daily_climate.rename(columns=rename_map, inplace=True)\n",
        "# --- End of Correction ---\n",
        "\n",
        "\n",
        "print(f\"[{time.time() - agg_start_time:.1f}s] Climate aggregation complete.\")\n",
        "\n",
        "# Convert date back to datetime object\n",
        "daily_climate['date'] = pd.to_datetime(daily_climate['date'])\n",
        "print(f\"Aggregated climate data shape: {daily_climate.shape}\")\n",
        "print(\"Columns after renaming: {daily_climate.columns.tolist()}\") # Verify names\n",
        "print(\"Aggregated Daily Climate Head:\")\n",
        "print(daily_climate.head())\n",
        "\n",
        "\n",
        "\n",
        "# --- Merge Aggregated Data ---\n",
        "print(f\"\\n[{time.time() - agg_start_time:.1f}s] Merging aggregated daily MHP and climate data...\")\n",
        "df_train_full = pd.merge(daily_kwh, daily_climate, on='date', how='left')\n",
        "print(f\"[{time.time() - agg_start_time:.1f}s] Merge complete. Initial merged shape: {df_train_full.shape}\")\n",
        "\n",
        "# --- Handle Missing Values ---\n",
        "print(f\"\\n[{time.time() - agg_start_time:.1f}s] Checking NaNs before fill:\\n{df_train_full.isnull().sum()}\")\n",
        "# Sort before filling for consistent ffill/bfill\n",
        "df_train_full.sort_values(by=['user_id', 'date'], inplace=True)\n",
        "df_train_full.fillna(method='ffill', inplace=True)\n",
        "df_train_full.fillna(method='bfill', inplace=True)\n",
        "nan_count_after = df_train_full.isnull().sum().sum()\n",
        "print(f\"\\n[{time.time() - agg_start_time:.1f}s] FillNA complete. NaNs remaining: {nan_count_after}\")\n",
        "\n",
        "agg_total_time = time.time() - agg_start_time\n",
        "print(f\"\\n[{agg_total_time:.1f}s] Cell 6 processing finished.\")\n",
        "print(\"\\n--- Merged & Cleaned Training Data Head ---\")\n",
        "print(df_train_full.head())"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cell 7A: Exploratory Data Analysis (Post-Aggregation)\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "print(\"--- EDA on Aggregated Data (df_train_full) ---\")\n",
        "\n",
        "# 1. Distribution of the Target Variable (daily_kwh)\n",
        "plt.figure(figsize=(10, 5))\n",
        "sns.histplot(df_train_full['daily_kwh'], bins=100, kde=False)\n",
        "plt.title('Distribution of Daily kWh Consumption')\n",
        "plt.xlabel('Daily kWh')\n",
        "plt.ylabel('Frequency')\n",
        "# Optionally zoom in if outliers dominate\n",
        "# plt.xlim(0, df_train_full['daily_kwh'].quantile(0.99)) # Zoom to 99th percentile\n",
        "plt.show()\n",
        "# Observation: Is the distribution heavily skewed? Many low values?\n",
        "\n",
        "# 2. Consumption Over Time (Sample Users)\n",
        "# Select a few user IDs to plot\n",
        "sample_user_ids = df_train_full['user_id'].unique()[:3] # Get first 3 unique users\n",
        "print(f\"\\nPlotting time series for sample users: {sample_user_ids}\")\n",
        "\n",
        "plt.figure(figsize=(15, 6))\n",
        "for user in sample_user_ids:\n",
        "    user_data = df_train_full[df_train_full['user_id'] == user]\n",
        "    plt.plot(user_data['date'], user_data['daily_kwh'], label=user, alpha=0.8)\n",
        "\n",
        "plt.title('Daily kWh Consumption Over Time (Sample Users)')\n",
        "plt.xlabel('Date')\n",
        "plt.ylabel('Daily kWh')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "# Observation: Do users have different base levels? Similar seasonal patterns? Weekday/weekend patterns?\n",
        "\n",
        "# 3. Average Consumption by Day of Week\n",
        "plt.figure(figsize=(10, 5))\n",
        "df_train_full.groupby('dayofweek')['daily_kwh'].mean().plot(kind='bar')\n",
        "plt.title('Average Daily kWh by Day of Week (0=Mon, 6=Sun)')\n",
        "plt.xlabel('Day of Week')\n",
        "plt.ylabel('Average Daily kWh')\n",
        "plt.xticks(rotation=0)\n",
        "plt.show()\n",
        "# Observation: Is there a clear weekly pattern (e.g., lower on weekends)?\n",
        "\n",
        "# 4. Average Consumption by Month\n",
        "plt.figure(figsize=(10, 5))\n",
        "df_train_full.groupby('month')['daily_kwh'].mean().plot(kind='bar')\n",
        "plt.title('Average Daily kWh by Month')\n",
        "plt.xlabel('Month')\n",
        "plt.ylabel('Average Daily kWh')\n",
        "plt.xticks(rotation=0)\n",
        "plt.show()\n",
        "# Observation: Is there clear seasonality?\n",
        "\n",
        "print(\"\\n--- End of EDA ---\")"
      ],
      "metadata": {
        "collapsed": true,
        "id": "kN4RxCaDzHUl",
        "outputId": "5f79129e-4fb9-4b9a-9de0-9a7a4b22e69c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "id": "kN4RxCaDzHUl",
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- EDA on Aggregated Data (df_train_full) ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Plotting time series for sample users: ['consumer_device_3_data_user_9' 'consumer_device_3_data_user_4'\n",
            " 'consumer_device_3_data_user_3']\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- End of EDA ---\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "729be8bf",
      "metadata": {
        "id": "729be8bf"
      },
      "source": [
        "## 4. Feature Engineering\n",
        "\n",
        "Create features based on the date and potentially other aspects of the data. For this baseline, we will focus on date-based features. More advanced features (lags, rolling windows, user-specific stats) can be added later for improvement."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 63,
      "id": "49f9eba0",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "49f9eba0",
        "outputId": "1eb16809-3ac9-4692-e4c0-1331ade1eac6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Step 0: Converting user_id to Category ---\n",
            "Original user_id dtype: category\n",
            "Converted user_id dtype: category\n",
            "\n",
            "--- Step 1: Creating Lag Features ---\n",
            "Sorting data by user_id and date...\n",
            "Calculating lags for column: 'daily_kwh' using periods: [1, 2, 3, 7, 14, 28]\n",
            "[0.1s] Created lag features: ['daily_kwh_lag_1', 'daily_kwh_lag_2', 'daily_kwh_lag_3', 'daily_kwh_lag_7', 'daily_kwh_lag_14', 'daily_kwh_lag_28']\n",
            "\n",
            "--- Step 3: Creating Date Features ---\n",
            "[0.1s] Date features applied.\n",
            "\n",
            "--- Step 4: Defining Final Feature List ---\n",
            "Added 'user_id' to features list.\n",
            "Adding 6 lag features.\n",
            "\n",
            "Final list of features defined (19): ['year', 'month', 'day', 'dayofweek', 'dayofyear', 'weekofyear', 'quarter', 'is_weekend', 'temp_mean', 'dew_point_mean', 'wind_speed_mean', 'precip_sum', 'user_id', 'daily_kwh_lag_1', 'daily_kwh_lag_2', 'daily_kwh_lag_3', 'daily_kwh_lag_7', 'daily_kwh_lag_14', 'daily_kwh_lag_28']\n",
            "\n",
            "--- Step 5: Checking Data Types & Handling NaNs ---\n",
            "Checking for non-numeric feature columns (excluding category)...\n",
            "\n",
            "Handling remaining NaNs in features (filling with 0)...\n",
            "NaN counts BEFORE fill (numeric features only):\n",
            "daily_kwh_lag_1      1\n",
            "daily_kwh_lag_2      2\n",
            "daily_kwh_lag_3      3\n",
            "daily_kwh_lag_7      7\n",
            "daily_kwh_lag_14    14\n",
            "daily_kwh_lag_28    28\n",
            "dtype: int64\n",
            "\n",
            "[ OK ] NaNs handled. Total remaining (numeric): 0\n",
            "\n",
            "[0.2s] Cell 8 processing finished.\n",
            "\n",
            "--- Training Data with New Features Head (Sample) ---\n",
            "       user_id       date  daily_kwh  year  month user_id  daily_kwh_lag_1  \\\n",
            "118392     0.0 2023-06-03   0.000922  2023      6     0.0         0.000000   \n",
            "116407     0.0 2023-06-03   0.001066  2023      6     0.0         0.000922   \n",
            "116010     0.0 2023-06-03   0.001183  2023      6     0.0         0.001066   \n",
            "115216     0.0 2023-06-03   0.001009  2023      6     0.0         0.001183   \n",
            "116804     0.0 2023-06-03   0.001094  2023      6     0.0         0.001009   \n",
            "\n",
            "        daily_kwh_lag_2  \n",
            "118392         0.000000  \n",
            "116407         0.000000  \n",
            "116010         0.000922  \n",
            "115216         0.001066  \n",
            "116804         0.001183  \n"
          ]
        }
      ],
      "source": [
        "# Cell 8: Feature Engineering (Date + Lag + Rolling + UserID)\n",
        "\n",
        "import time\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "feature_eng_start_time = time.time()\n",
        "\n",
        "# --- Check for input DataFrame ---\n",
        "if 'df_train_full' not in locals():\n",
        "    raise NameError(\"df_train_full not found. Ensure Cell 6 ran successfully.\")\n",
        "\n",
        "# --- 0. Convert user_id to Category dtype --- <<<< NEW STEP >>>>\n",
        "print(\"--- Step 0: Converting user_id to Category ---\")\n",
        "if 'user_id' in df_train_full.columns:\n",
        "    print(f\"Original user_id dtype: {df_train_full['user_id'].dtype}\")\n",
        "    df_train_full['user_id'] = df_train_full['user_id'].astype('category')\n",
        "    print(f\"Converted user_id dtype: {df_train_full['user_id'].dtype}\")\n",
        "else:\n",
        "    raise KeyError(\"Column 'user_id' not found in df_train_full.\")\n",
        "\n",
        "\n",
        "# --- 1. Create Lag Features ---\n",
        "print(\"\\n--- Step 1: Creating Lag Features ---\")\n",
        "print(\"Sorting data by user_id and date...\")\n",
        "df_train_full = df_train_full.sort_values(by=['user_id', 'date'])\n",
        "\n",
        "lags_to_create = [1, 2, 3, 7, 14, 28]\n",
        "lag_col_name_base = 'daily_kwh_lag_'\n",
        "lag_cols_created = []\n",
        "\n",
        "target_col_for_lags = 'daily_kwh'\n",
        "print(f\"Calculating lags for column: '{target_col_for_lags}' using periods: {lags_to_create}\")\n",
        "for lag in lags_to_create:\n",
        "    col_name = f\"{lag_col_name_base}{lag}\"\n",
        "    df_train_full[col_name] = df_train_full.groupby('user_id', observed=True)[target_col_for_lags].shift(lag) # added observed=True\n",
        "    lag_cols_created.append(col_name)\n",
        "print(f\"[{time.time() - feature_eng_start_time:.1f}s] Created lag features: {lag_cols_created}\")\n",
        "\n",
        "\n",
        "# --- 2. Create Rolling Window Features ---\n",
        "#print(\"\\n--- Step 2: Creating Rolling Window Features ---\")\n",
        "#windows = [7, 14, 28]\n",
        "#stats = ['mean', 'std', 'min', 'max']\n",
        "#rolling_cols_created = []\n",
        "\n",
        "#target_col_for_rolling = 'daily_kwh'\n",
        "#print(f\"Calculating rolling stats for column: '{target_col_for_rolling}' using windows: {windows}\")\n",
        "# Use observed=True for groupby with category dtype\n",
        "#grouped = df_train_full.groupby('user_id', observed=True)[target_col_for_rolling]\n",
        "\n",
        "#for window in windows:\n",
        "#    print(f\"  Processing window size: {window}\")\n",
        "#    shifted_grouped = grouped.shift(1)\n",
        "#    rolling_object = shifted_grouped.rolling(window=window, min_periods=1)\n",
        "#    for stat in stats:\n",
        "#         col_name = f'daily_kwh_roll_{window}_{stat}'\n",
        "#         print(f\"    Calculating: {stat} -> {col_name}\")\n",
        "#        df_train_full[col_name] = rolling_object.agg(stat)\n",
        "#        rolling_cols_created.append(col_name)\n",
        "#print(f\"[{time.time() - feature_eng_start_time:.1f}s] Created rolling window features: {rolling_cols_created}\")\n",
        "\n",
        "\n",
        "# --- 3. Create Date Features ---\n",
        "print(\"\\n--- Step 3: Creating Date Features ---\")\n",
        "def create_date_features(df, date_col='date'):\n",
        "    \"\"\"Creates time series features from a date column.\"\"\"\n",
        "    df = df.copy()\n",
        "    df[date_col] = pd.to_datetime(df[date_col])\n",
        "    df['year'] = df[date_col].dt.year\n",
        "    df['month'] = df[date_col].dt.month\n",
        "    df['day'] = df[date_col].dt.day\n",
        "    df['dayofweek'] = df[date_col].dt.dayofweek\n",
        "    df['dayofyear'] = df[date_col].dt.dayofyear\n",
        "    df['weekofyear'] = df[date_col].dt.isocalendar().week.astype(int)\n",
        "    df['quarter'] = df[date_col].dt.quarter\n",
        "    df['is_weekend'] = (df['dayofweek'] >= 5).astype(int)\n",
        "    return df\n",
        "\n",
        "df_train_full = create_date_features(df_train_full, 'date')\n",
        "print(f\"[{time.time() - feature_eng_start_time:.1f}s] Date features applied.\")\n",
        "\n",
        "\n",
        "# --- 4. Define Final Feature List ---\n",
        "print(\"\\n--- Step 4: Defining Final Feature List ---\")\n",
        "base_features = [\n",
        "    'year', 'month', 'day', 'dayofweek', 'dayofyear', 'weekofyear', 'quarter', 'is_weekend',\n",
        "    'temp_mean', 'dew_point_mean', 'wind_speed_mean', 'precip_sum'\n",
        "]\n",
        "features = list(base_features)\n",
        "\n",
        "# --- Add user_id feature --- <<<< NEW >>>>\n",
        "features.append('user_id')\n",
        "print(\"Added 'user_id' to features list.\")\n",
        "\n",
        "# Add lag features\n",
        "if 'lag_cols_created' in locals() and isinstance(lag_cols_created, list):\n",
        "    print(f\"Adding {len(lag_cols_created)} lag features.\")\n",
        "    features.extend(lag_cols_created)\n",
        "else: print(\"WARNING: Lag features not added.\")\n",
        "\n",
        "# Add rolling window features\n",
        "#if 'rolling_cols_created' in locals() and isinstance(rolling_cols_created, list):\n",
        "#    print(f\"Adding {len(rolling_cols_created)} rolling features.\")\n",
        "#    features.extend(rolling_cols_created)\n",
        "#else: print(\"WARNING: Rolling window features not added.\")\n",
        "\n",
        "target = 'daily_kwh'\n",
        "print(f\"\\nFinal list of features defined ({len(features)}): {features}\")\n",
        "\n",
        "\n",
        "# --- 5. Check Feature Data Types and Handle NaNs ---\n",
        "print(\"\\n--- Step 5: Checking Data Types & Handling NaNs ---\")\n",
        "missing_features = [f for f in features if f not in df_train_full.columns]\n",
        "if missing_features: raise ValueError(f\"Features defined but missing: {missing_features}\")\n",
        "\n",
        "print(\"Checking for non-numeric feature columns (excluding category)...\")\n",
        "for col in features:\n",
        "    # Exclude category type from numeric conversion check\n",
        "    if col != 'user_id' and not pd.api.types.is_numeric_dtype(df_train_full[col]):\n",
        "        print(f\"  Warning: Feature '{col}' not numeric ({df_train_full[col].dtype}). Converting.\")\n",
        "        df_train_full[col] = pd.to_numeric(df_train_full[col], errors='coerce')\n",
        "        if df_train_full[col].isnull().any():\n",
        "             print(f\"    NaNs from conversion in {col}, filling with 0.\")\n",
        "             df_train_full[col].fillna(0, inplace=True)\n",
        "\n",
        "print(f\"\\nHandling remaining NaNs in features (filling with 0)...\")\n",
        "# Exclude user_id from NaN filling as it's categorical\n",
        "numeric_features_for_nan_fill = [f for f in features if f != 'user_id']\n",
        "nan_counts_before_fill = df_train_full[numeric_features_for_nan_fill].isnull().sum()\n",
        "print(\"NaN counts BEFORE fill (numeric features only):\")\n",
        "print(nan_counts_before_fill[nan_counts_before_fill > 0])\n",
        "df_train_full[numeric_features_for_nan_fill] = df_train_full[numeric_features_for_nan_fill].fillna(0)\n",
        "nan_counts_after_fill = df_train_full[numeric_features_for_nan_fill].isnull().sum().sum()\n",
        "if nan_counts_after_fill == 0: print(f\"\\n[ OK ] NaNs handled. Total remaining (numeric): {nan_counts_after_fill}\")\n",
        "else: print(f\"\\n[ WARNING ] NaNs remain after fill (numeric): {nan_counts_after_fill}.\")\n",
        "\n",
        "feature_eng_total_time = time.time() - feature_eng_start_time\n",
        "print(f\"\\n[{feature_eng_total_time:.1f}s] Cell 8 processing finished.\")\n",
        "\n",
        "print(\"\\n--- Training Data with New Features Head (Sample) ---\")\n",
        "cols_to_show = (['user_id', 'date', target] + base_features[:2] + ['user_id'] +\n",
        "                lag_cols_created[:2])\n",
        "print(df_train_full[cols_to_show].head())"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a487309a",
      "metadata": {
        "id": "a487309a"
      },
      "source": [
        "## 5. Train/Validation Split (Time-Based)\n",
        "\n",
        "For time series forecasting, it's crucial to validate the model on data that comes *after* the training data. We will split the data chronologically, using the most recent period for validation. Shuffling should **not** be used."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 64,
      "id": "fd68efd1",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fd68efd1",
        "outputId": "2471b6c3-95b2-4ee6-9a6e-8265e2bd11ff"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Setting up Time Series Cross-Validation ---\n",
            "Sorting data by date for TimeSeriesSplit...\n",
            "Full data shape for CV: X=(136409, 19), y=(136409,)\n",
            "Using TimeSeriesSplit with 5 splits.\n",
            "Using LGBM parameters: {'objective': 'regression_l1', 'metric': 'rmse', 'n_estimators': 2000, 'learning_rate': 0.03, 'feature_fraction': 0.8, 'bagging_fraction': 0.8, 'bagging_freq': 1, 'lambda_l1': 1, 'lambda_l2': 1, 'num_leaves': 21, 'verbose': -1, 'n_jobs': -1, 'seed': 42, 'boosting_type': 'gbdt'}\n",
            "\n",
            "--- Starting Cross-Validation Training ---\n",
            "\n",
            "--- Fold 1/5 ---\n",
            "Train size: 22739, Val size: 22734\n",
            "Training model for fold...\n",
            "Fold 1 RMSE: 3.7601 (Best iteration: 1066)\n",
            "Fold 1 completed in 11.7s\n",
            "\n",
            "--- Fold 2/5 ---\n",
            "Train size: 45473, Val size: 22734\n",
            "Training model for fold...\n",
            "Fold 2 RMSE: 0.0000 (Best iteration: 1)\n",
            "------ Diagnostics for Fold 2 (RMSE is ~0) ------\n",
            "  Validation target non-null count: 22734\n",
            "  Validation target unique values count: 1\n",
            "  Unique values: [0.]\n",
            "  Min: 0.0000, Max: 0.0000, Mean: 0.0000, StdDev: 0.0000\n",
            "  Predictions Min: 0.0000, Max: 0.0000, Mean: 0.0000, StdDev: 0.0000\n",
            "------ End Diagnostics ------\n",
            "Fold 2 completed in 0.8s\n",
            "\n",
            "--- Fold 3/5 ---\n",
            "Train size: 68207, Val size: 22734\n",
            "Training model for fold...\n",
            "Fold 3 RMSE: 0.0000 (Best iteration: 1)\n",
            "------ Diagnostics for Fold 3 (RMSE is ~0) ------\n",
            "  Validation target non-null count: 22734\n",
            "  Validation target unique values count: 1\n",
            "  Unique values: [0.]\n",
            "  Min: 0.0000, Max: 0.0000, Mean: 0.0000, StdDev: 0.0000\n",
            "  Predictions Min: 0.0000, Max: 0.0000, Mean: 0.0000, StdDev: 0.0000\n",
            "------ End Diagnostics ------\n",
            "Fold 3 completed in 1.0s\n",
            "\n",
            "--- Fold 4/5 ---\n",
            "Train size: 90941, Val size: 22734\n",
            "Training model for fold...\n",
            "Fold 4 RMSE: 2.6129 (Best iteration: 11)\n",
            "Fold 4 completed in 1.2s\n",
            "\n",
            "--- Fold 5/5 ---\n",
            "Train size: 113675, Val size: 22734\n",
            "Training model for fold...\n",
            "Fold 5 RMSE: 7.6853 (Best iteration: 550)\n",
            "Fold 5 completed in 12.4s\n",
            "\n",
            "--- Cross-Validation Summary ---\n",
            "Individual Fold RMSEs: [3.7601, 0.0, 0.0, 2.6129, 7.6853]\n",
            "Mean CV RMSE (All Folds): 2.8117\n",
            "Std Dev CV RMSE (All Folds): 2.8461\n",
            "\n",
            "--- Realistic CV Summary (Excluding Zero-RMSE Folds) ---\n",
            "Scores Used: [3.7601, 2.6129, 7.6853]\n",
            "Mean Realistic CV RMSE: 4.6861\n",
            "Std Dev Realistic CV RMSE: 2.1719\n",
            "\n",
            "Total CV Time: 27.0s\n"
          ]
        }
      ],
      "source": [
        "# Cell 9: Time Series Cross-Validation (with UserID, Diagnostics, Realistic Score)\n",
        "\n",
        "from sklearn.model_selection import TimeSeriesSplit\n",
        "import lightgbm as lgb\n",
        "from sklearn.metrics import mean_squared_error\n",
        "import math\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt # Import matplotlib for optional plot\n",
        "import time # Import time\n",
        "\n",
        "print(\"--- Setting up Time Series Cross-Validation ---\")\n",
        "\n",
        "# --- Check required inputs ---\n",
        "if 'df_train_full' not in locals(): raise NameError(\"df_train_full not found.\")\n",
        "if 'features' not in locals(): raise NameError(\"features list not defined.\")\n",
        "if 'target' not in locals(): raise NameError(\"target variable name not defined.\")\n",
        "if 'SEED' not in locals(): SEED = 42; print(\"Warning: SEED not found, using 42.\")\n",
        "\n",
        "# --- Prepare full dataset ---\n",
        "print(\"Sorting data by date for TimeSeriesSplit...\")\n",
        "df_train_full = df_train_full.sort_values(by='date')\n",
        "# Ensure user_id is category type before splitting\n",
        "if df_train_full['user_id'].dtype.name != 'category':\n",
        "    print(\"Warning: Converting user_id back to category in CV setup.\")\n",
        "    df_train_full['user_id'] = df_train_full['user_id'].astype('category')\n",
        "\n",
        "X_full = df_train_full[features]\n",
        "y_full = df_train_full[target]\n",
        "print(f\"Full data shape for CV: X={X_full.shape}, y={y_full.shape}\")\n",
        "\n",
        "# --- Configure TimeSeriesSplit ---\n",
        "N_SPLITS = 5\n",
        "tscv = TimeSeriesSplit(n_splits=N_SPLITS)\n",
        "print(f\"Using TimeSeriesSplit with {N_SPLITS} splits.\")\n",
        "\n",
        "# --- Define LightGBM Parameters ---\n",
        "lgb_params = {\n",
        "    'objective': 'regression_l1', 'metric': 'rmse', 'n_estimators': 2000,\n",
        "    'learning_rate': 0.03, 'feature_fraction': 0.8, 'bagging_fraction': 0.8,\n",
        "    'bagging_freq': 1, 'lambda_l1': 1, 'lambda_l2': 1, 'num_leaves': 21,\n",
        "    'verbose': -1, 'n_jobs': -1, 'seed': SEED, 'boosting_type': 'gbdt',\n",
        "}\n",
        "print(f\"Using LGBM parameters: {lgb_params}\")\n",
        "\n",
        "# --- Run Cross-Validation Loop ---\n",
        "oof_predictions = np.zeros(len(df_train_full))\n",
        "fold_scores = []\n",
        "trained_models = []\n",
        "best_iterations = []\n",
        "zero_rmse_folds = [] # Keep track of zero RMSE folds\n",
        "\n",
        "cv_start_time = time.time()\n",
        "print(\"\\n--- Starting Cross-Validation Training ---\")\n",
        "\n",
        "for fold, (train_index, val_index) in enumerate(tscv.split(X_full)):\n",
        "    fold_start_time = time.time()\n",
        "    print(f\"\\n--- Fold {fold+1}/{N_SPLITS} ---\")\n",
        "\n",
        "    X_train, X_val = X_full.iloc[train_index], X_full.iloc[val_index]\n",
        "    y_train, y_val = y_full.iloc[train_index], y_full.iloc[val_index]\n",
        "    print(f\"Train size: {len(train_index)}, Val size: {len(val_index)}\")\n",
        "\n",
        "    model_fold = lgb.LGBMRegressor(**lgb_params)\n",
        "\n",
        "    print(\"Training model for fold...\")\n",
        "    model_fold.fit(X_train, y_train,\n",
        "                   eval_set=[(X_val, y_val)],\n",
        "                   eval_metric='rmse',\n",
        "                   callbacks=[lgb.early_stopping(stopping_rounds=100, verbose=False)],\n",
        "                   categorical_feature=['user_id'] # <<<--- SPECIFY CATEGORICAL FEATURE ---<<<\n",
        "                  )\n",
        "\n",
        "    best_iter = model_fold.best_iteration_\n",
        "    best_iterations.append(best_iter if best_iter else lgb_params['n_estimators'])\n",
        "\n",
        "    val_preds_fold = model_fold.predict(X_val)\n",
        "    val_preds_fold = np.maximum(0, val_preds_fold)\n",
        "\n",
        "    rmse_fold = math.sqrt(mean_squared_error(y_val, val_preds_fold))\n",
        "    fold_scores.append(rmse_fold)\n",
        "    print(f\"Fold {fold+1} RMSE: {rmse_fold:.4f} (Best iteration: {best_iter})\")\n",
        "\n",
        "    # --- Diagnostics for potentially zero RMSE folds ---\n",
        "    # Check if RMSE is effectively zero\n",
        "    if np.isclose(rmse_fold, 0.0):\n",
        "        zero_rmse_folds.append(fold) # Store index of zero fold\n",
        "        print(f\"------ Diagnostics for Fold {fold+1} (RMSE is ~0) ------\")\n",
        "        print(f\"  Validation target non-null count: {y_val.count()}\")\n",
        "        if y_val.count() > 0:\n",
        "            print(f\"  Validation target unique values count: {y_val.nunique()}\")\n",
        "            if y_val.nunique() < 10: print(f\"  Unique values: {np.unique(y_val.dropna())}\")\n",
        "            print(f\"  Min: {y_val.min():.4f}, Max: {y_val.max():.4f}, Mean: {y_val.mean():.4f}, StdDev: {y_val.std():.4f}\")\n",
        "            print(f\"  Predictions Min: {val_preds_fold.min():.4f}, Max: {val_preds_fold.max():.4f}, Mean: {val_preds_fold.mean():.4f}, StdDev: {val_preds_fold.std():.4f}\")\n",
        "        else: print(\"  Validation target slice has no non-null values!\")\n",
        "        print(f\"------ End Diagnostics ------\")\n",
        "\n",
        "    oof_predictions[val_index] = val_preds_fold\n",
        "    # trained_models.append(model_fold) # Optional\n",
        "    fold_time = time.time() - fold_start_time\n",
        "    print(f\"Fold {fold+1} completed in {fold_time:.1f}s\")\n",
        "\n",
        "# --- Calculate and Print Overall & Realistic CV Scores ---\n",
        "mean_cv_rmse = np.mean(fold_scores)\n",
        "std_cv_rmse = np.std(fold_scores)\n",
        "cv_total_time = time.time() - cv_start_time\n",
        "\n",
        "print(\"\\n--- Cross-Validation Summary ---\")\n",
        "print(f\"Individual Fold RMSEs: {[round(s, 4) for s in fold_scores]}\")\n",
        "print(f\"Mean CV RMSE (All Folds): {mean_cv_rmse:.4f}\")\n",
        "print(f\"Std Dev CV RMSE (All Folds): {std_cv_rmse:.4f}\")\n",
        "\n",
        "# Calculate realistic score excluding zero RMSE folds\n",
        "realistic_scores = [score for i, score in enumerate(fold_scores) if i not in zero_rmse_folds]\n",
        "if realistic_scores: # Ensure list is not empty\n",
        "    mean_realistic_cv_rmse = np.mean(realistic_scores)\n",
        "    std_realistic_cv_rmse = np.std(realistic_scores)\n",
        "    print(\"\\n--- Realistic CV Summary (Excluding Zero-RMSE Folds) ---\")\n",
        "    print(f\"Scores Used: {[round(s, 4) for s in realistic_scores]}\")\n",
        "    print(f\"Mean Realistic CV RMSE: {mean_realistic_cv_rmse:.4f}\") # <-- REALISTIC BENCHMARK\n",
        "    print(f\"Std Dev Realistic CV RMSE: {std_realistic_cv_rmse:.4f}\")\n",
        "else:\n",
        "    print(\"\\nWarning: All folds had zero RMSE or calculation failed.\")\n",
        "    mean_realistic_cv_rmse = 0 # Set a default if all folds were zero\n",
        "\n",
        "print(f\"\\nTotal CV Time: {cv_total_time:.1f}s\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "0c0e2e18",
      "metadata": {
        "id": "0c0e2e18"
      },
      "source": [
        "## 6. Model Training (LightGBM Baseline)\n",
        "\n",
        "We will use LightGBM, a gradient boosting framework known for its speed and efficiency, to train a baseline model. We'll use early stopping based on the validation set performance (RMSE) to prevent overfitting and find a reasonable number of boosting rounds."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 65,
      "id": "ec1e217c",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ec1e217c",
        "outputId": "b90f6c20-8b08-4c15-9dab-f026f1629141"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Training Final Model on Full Data ---\n",
            "Determined optimal rounds from CV median: 11\n",
            "Using parameters for final model: {'objective': 'regression_l1', 'metric': 'rmse', 'n_estimators': 11, 'learning_rate': 0.03, 'feature_fraction': 0.8, 'bagging_fraction': 0.8, 'bagging_freq': 1, 'lambda_l1': 1, 'lambda_l2': 1, 'num_leaves': 21, 'verbose': -1, 'n_jobs': -1, 'seed': 42, 'boosting_type': 'gbdt'}\n",
            "Training final model on 136409 samples...\n",
            "\n",
            "Final model training complete in 0.5s\n"
          ]
        }
      ],
      "source": [
        "# Cell 10: Final Model Training (with UserID)\n",
        "\n",
        "import lightgbm as lgb\n",
        "import numpy as np\n",
        "import time\n",
        "\n",
        "print(\"\\n--- Training Final Model on Full Data ---\")\n",
        "final_model_start_time = time.time()\n",
        "\n",
        "# --- Check for required inputs ---\n",
        "if 'X_full' not in locals(): raise NameError(\"X_full not found.\")\n",
        "if 'y_full' not in locals(): raise NameError(\"y_full not found.\")\n",
        "if 'lgb_params' not in locals(): raise NameError(\"lgb_params not defined.\")\n",
        "if 'best_iterations' not in locals(): raise NameError(\"best_iterations list not found.\")\n",
        "# Ensure user_id is category in X_full\n",
        "if X_full['user_id'].dtype.name != 'category':\n",
        "     print(\"Warning: Converting user_id to category for final model training.\")\n",
        "     X_full['user_id'] = X_full['user_id'].astype('category')\n",
        "\n",
        "\n",
        "# --- Determine Optimal Number of Rounds ---\n",
        "if best_iterations: # Check if list is not empty\n",
        "    optimal_rounds = int(np.median(best_iterations))\n",
        "    # Optional: Add a small safety margin if median seems low due to zero folds\n",
        "    # optimal_rounds = max(50, optimal_rounds) # Ensure at least 50 rounds\n",
        "    print(f\"Determined optimal rounds from CV median: {optimal_rounds}\")\n",
        "else:\n",
        "    print(\"Warning: best_iterations list is empty. Using default n_estimators.\")\n",
        "    optimal_rounds = lgb_params.get('n_estimators', 1000) # Fallback\n",
        "\n",
        "# --- Initialize Final Model ---\n",
        "final_model_params = lgb_params.copy()\n",
        "final_model_params['n_estimators'] = optimal_rounds\n",
        "\n",
        "print(f\"Using parameters for final model: {final_model_params}\")\n",
        "final_model = lgb.LGBMRegressor(**final_model_params)\n",
        "\n",
        "# --- Train on ALL data, specifying categorical feature ---\n",
        "print(f\"Training final model on {X_full.shape[0]} samples...\")\n",
        "final_model.fit(X_full, y_full,\n",
        "                categorical_feature=['user_id'] # <<<--- SPECIFY CATEGORICAL ---<<<\n",
        "               )\n",
        "\n",
        "final_model_time = time.time() - final_model_start_time\n",
        "print(f\"\\nFinal model training complete in {final_model_time:.1f}s\")\n",
        "\n",
        "# Optional: Save the final model\n",
        "# import joblib\n",
        "# joblib.dump(final_model, 'final_lgb_model_v4_userid.pkl')\n",
        "# print(\"Final model saved.\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3a98dead",
      "metadata": {
        "id": "3a98dead"
      },
      "source": [
        "## 8. Prepare Test Data and Generate Predictions\n",
        "\n",
        "Now we prepare the actual test dataset based on the `SampleSubmission.csv` file. This involves:\n",
        "1.  Extracting the required future `date` and `user_id` from the `ID` column in the sample submission.\n",
        "2.  Merging the relevant aggregated daily `climate` data for those future dates.\n",
        "3.  Creating the same date-based `features` that the model was trained on.\n",
        "4.  Handling any potential missing climate data for future dates (e.g., by forward filling the last known values).\n",
        "5.  Using the trained `model` to predict `daily_kwh` for the test set."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 66,
      "id": "15ab428b",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "15ab428b",
        "outputId": "d0324010-0920-4e15-af44-a9ce5f5b7ca4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Preparing Test Data (with UserID Conversion) ---\n",
            "[0.2s] Base test structure created.\n",
            "[0.2s] Merging climate data...\n",
            "[0.2s] Climate data merged.\n",
            "[0.2s] Combining history...\n",
            "Need history back to 2024-07-29\n",
            "Combined data shape: (6014, 7)\n",
            "[0.3s] Calculating lag features...\n",
            "Converting combined_df user_id to category for groupby...\n",
            "Lag calculation finished.\n",
            "\n",
            "[0.3s] Creating date features...\n",
            "Date features created.\n",
            "\n",
            "[0.3s] Filtering back to required test dates...\n",
            "Filtered back to test set shape: (6014, 22)\n",
            "\n",
            "[0.3s] Final checks and feature alignment...\n",
            "Converting user_id in test_df_final to category dtype...\n",
            "Handling NaNs in final test features (filling with 0)...\n",
            "[ OK ] Final test features (X_test) prepared. Shape: {X_test.shape}\n",
            "\n",
            "[0.3s] Predicting using final_model...\n",
            "Reordering X_test columns to match model training order.\n",
            "Prediction on test set complete.\n",
            "\n",
            "[0.3s] Cell 16 processing finished.\n"
          ]
        }
      ],
      "source": [
        "# Cell 16: Prepare Test Data (Revised with UserID Conversion)\n",
        "\n",
        "import time\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "print(\"--- Preparing Test Data (with UserID Conversion) ---\")\n",
        "test_prep_start_time = time.time()\n",
        "\n",
        "# --- Check for required inputs ---\n",
        "# (Keep checks for sample_sub, daily_climate, df_train_full, etc.)\n",
        "if 'sample_sub' not in locals(): raise NameError(\"sample_sub not found.\")\n",
        "if 'daily_climate' not in locals(): raise NameError(\"daily_climate not found.\")\n",
        "if 'df_train_full' not in locals(): raise NameError(\"df_train_full not found.\")\n",
        "if 'create_date_features' not in locals(): raise NameError(\"create_date_features not defined.\")\n",
        "if 'features' not in locals(): raise NameError(\"features list not defined.\")\n",
        "if 'final_model' not in locals(): raise NameError(\"Trained 'final_model' not found.\")\n",
        "if 'lag_cols_created' not in locals(): lag_cols_created = []; print(\"Warning: lag_cols_created not defined.\")\n",
        "if 'rolling_cols_created' not in locals(): rolling_cols_created = []; print(\"Warning: rolling_cols_created not defined.\")\n",
        "\n",
        "\n",
        "# --- 1. Create Base Test Set Structure ---\n",
        "test_df_base = sample_sub[['ID']].copy()\n",
        "try:\n",
        "    test_df_base['date_str'] = test_df_base['ID'].str.split('_').str[0]\n",
        "    test_df_base['date'] = pd.to_datetime(test_df_base['date_str'], errors='coerce')\n",
        "    test_df_base['user_id'] = test_df_base['ID'].str.split('_', n=1).str[1]\n",
        "    test_df_base.dropna(subset=['date'], inplace=True)\n",
        "except Exception as e: raise ValueError(f\"Error parsing ID: {e}\")\n",
        "print(f\"[{time.time() - test_prep_start_time:.1f}s] Base test structure created.\")\n",
        "\n",
        "\n",
        "# --- 2. Merge Future Climate Data ---\n",
        "print(f\"[{time.time() - test_prep_start_time:.1f}s] Merging climate data...\")\n",
        "test_df = pd.merge(test_df_base, daily_climate, on='date', how='left')\n",
        "test_df.sort_values(by='date', inplace=True)\n",
        "test_df.ffill(inplace=True)\n",
        "test_df.bfill(inplace=True)\n",
        "climate_cols_in_test = [col for col in daily_climate.columns if col != 'date' and col in test_df.columns]\n",
        "print(f\"[{time.time() - test_prep_start_time:.1f}s] Climate data merged.\")\n",
        "\n",
        "\n",
        "# --- 3. Combine History for Feature Calculation ---\n",
        "print(f\"[{time.time() - test_prep_start_time:.1f}s] Combining history...\")\n",
        "max_lag = max((int(c.split('_')[-1]) for c in lag_cols_created), default=0)\n",
        "max_roll_window = max((int(c.split('_')[-2]) for c in rolling_cols_created), default=0)\n",
        "history_needed_days = max_lag + max_roll_window + 1\n",
        "min_test_date = test_df['date'].min()\n",
        "cutoff_date = min_test_date - pd.Timedelta(days=history_needed_days)\n",
        "print(f\"Need history back to {cutoff_date.date()}\")\n",
        "cols_to_keep_hist = ['user_id', 'date', 'daily_kwh']\n",
        "historical_data = df_train_full[df_train_full['date'] < min_test_date][cols_to_keep_hist].copy()\n",
        "test_users = test_df['user_id'].unique()\n",
        "historical_data = historical_data[historical_data['user_id'].isin(test_users)]\n",
        "historical_data = historical_data[historical_data['date'] >= cutoff_date]\n",
        "future_data_cols = ['user_id', 'date'] + climate_cols_in_test\n",
        "future_data = test_df[future_data_cols].copy()\n",
        "future_data['daily_kwh'] = np.nan\n",
        "combined_df = pd.concat([historical_data, future_data], ignore_index=True)\n",
        "combined_df = combined_df.sort_values(by=['user_id', 'date'])\n",
        "combined_df.drop_duplicates(subset=['user_id', 'date'], keep='last', inplace=True)\n",
        "print(f\"Combined data shape: {combined_df.shape}\")\n",
        "\n",
        "\n",
        "# --- 4. Calculate Lag Features ---\n",
        "print(f\"[{time.time() - test_prep_start_time:.1f}s] Calculating lag features...\")\n",
        "if lag_cols_created:\n",
        "    target_col_for_lags = 'daily_kwh'\n",
        "    lags_to_create = [int(c.split('_')[-1]) for c in lag_cols_created]\n",
        "    # Need to convert user_id to category in combined_df if not already\n",
        "    if combined_df['user_id'].dtype.name != 'category':\n",
        "        print(\"Converting combined_df user_id to category for groupby...\")\n",
        "        combined_df['user_id'] = combined_df['user_id'].astype('category')\n",
        "    for lag in lags_to_create:\n",
        "        col_name = f\"daily_kwh_lag_{lag}\"\n",
        "        combined_df[col_name] = combined_df.groupby('user_id', observed=True)[target_col_for_lags].shift(lag) # added observed=True\n",
        "    print(\"Lag calculation finished.\")\n",
        "\n",
        "\n",
        "# --- 5. Calculate Rolling Window Features ---\n",
        "#print(f\"\\n[{time.time() - test_prep_start_time:.1f}s] Calculating rolling features...\")\n",
        "#if rolling_cols_created:\n",
        "#    target_col_for_rolling = 'daily_kwh'\n",
        "#    windows = sorted(list(set(int(c.split('_')[-2]) for c in rolling_cols_created)))\n",
        "#   stats = sorted(list(set(c.split('_')[-1] for c in rolling_cols_created)))\n",
        "#    print(f\"Using windows: {windows}, stats: {stats}\")\n",
        "#    # Ensure user_id is category for groupby\n",
        "#    if combined_df['user_id'].dtype.name != 'category':\n",
        "#        print(\"Converting combined_df user_id to category for groupby...\")\n",
        "#        combined_df['user_id'] = combined_df['user_id'].astype('category')\n",
        "#    grouped = combined_df.groupby('user_id', observed=True)[target_col_for_rolling] # added observed=True\n",
        "#    for window in windows:\n",
        "#        shifted_grouped = grouped.shift(1)\n",
        "#        rolling_object = shifted_grouped.rolling(window=window, min_periods=1)\n",
        "#        for stat in stats:\n",
        "#             col_name = f'daily_kwh_roll_{window}_{stat}'\n",
        "#             if col_name in rolling_cols_created:\n",
        "#                  combined_df[col_name] = rolling_object.agg(stat)\n",
        "#    print(\"Rolling window calculation finished.\")\n",
        "\n",
        "\n",
        "# --- 6. Create Date Features ---\n",
        "print(f\"\\n[{time.time() - test_prep_start_time:.1f}s] Creating date features...\")\n",
        "combined_df = create_date_features(combined_df, 'date')\n",
        "print(f\"Date features created.\")\n",
        "\n",
        "\n",
        "# --- 7. Filter Back to Required Test Dates ---\n",
        "print(f\"\\n[{time.time() - test_prep_start_time:.1f}s] Filtering back to required test dates...\")\n",
        "test_df_final = pd.merge(test_df_base[['ID', 'user_id', 'date']], combined_df, on=['user_id', 'date'], how='left')\n",
        "print(f\"Filtered back to test set shape: {test_df_final.shape}\")\n",
        "if len(test_df_final) != len(sample_sub): print(f\"WARNING: Row count mismatch! Got {len(test_df_final)}\")\n",
        "\n",
        "\n",
        "# --- 8. Final Checks and Feature Alignment ---\n",
        "print(f\"\\n[{time.time() - test_prep_start_time:.1f}s] Final checks and feature alignment...\")\n",
        "\n",
        "# --- Convert user_id to category in test_df_final --- <<<< NEW STEP >>>>\n",
        "if 'user_id' in test_df_final.columns:\n",
        "    print(\"Converting user_id in test_df_final to category dtype...\")\n",
        "    test_df_final['user_id'] = test_df_final['user_id'].astype('category')\n",
        "else:\n",
        "    print(\"Warning: user_id column not found in test_df_final before dtype conversion.\")\n",
        "\n",
        "# Check feature availability\n",
        "features_in_test = [f for f in features if f in test_df_final.columns]\n",
        "missing_features_in_test = [f for f in features if f not in test_df_final.columns]\n",
        "if missing_features_in_test:\n",
        "    print(f\"--- ERROR: Features missing from final test df: {missing_features_in_test} ---\")\n",
        "    raise ValueError(\"Mismatch between training features and test_df columns.\")\n",
        "\n",
        "# Handle NaNs (excluding categorical user_id)\n",
        "print(f\"Handling NaNs in final test features (filling with 0)...\")\n",
        "numeric_features_in_test = [f for f in features_in_test if f != 'user_id']\n",
        "test_df_final[numeric_features_in_test] = test_df_final[numeric_features_in_test].fillna(0)\n",
        "\n",
        "# Define X_test using only the available features used in training\n",
        "X_test = test_df_final[features_in_test]\n",
        "if X_test.isnull().any().any():\n",
        "    print(\"--- FATAL ERROR: NaNs found in X_test before prediction! ---\")\n",
        "    raise ValueError(\"NaNs detected in X_test.\")\n",
        "else:\n",
        "    print(\"[ OK ] Final test features (X_test) prepared. Shape: {X_test.shape}\")\n",
        "    # Ensure user_id is category in X_test\n",
        "    if X_test['user_id'].dtype.name != 'category': print(\"Warning: X_test user_id is not category!\")\n",
        "\n",
        "\n",
        "# --- 9. Predict on Test Set using FINAL MODEL ---\n",
        "print(f\"\\n[{time.time() - test_prep_start_time:.1f}s] Predicting using final_model...\")\n",
        "model_features = final_model.feature_name_\n",
        "predict_features = [f for f in model_features if f in X_test.columns]\n",
        "if len(predict_features) != len(model_features):\n",
        "    print(f\"Warning: Feature mismatch! Model trained on {len(model_features)}, predicting on {len(predict_features)}\")\n",
        "    missing_for_pred = [f for f in model_features if f not in X_test.columns]\n",
        "    print(f\"   Missing features for prediction: {missing_for_pred}\")\n",
        "    X_test_reordered = X_test[predict_features]\n",
        "else:\n",
        "    # Ensure X_test columns are in the same order as the model expects\n",
        "    # This is important now that user_id is included\n",
        "    print(\"Reordering X_test columns to match model training order.\")\n",
        "    X_test_reordered = X_test[model_features]\n",
        "\n",
        "test_predictions = final_model.predict(X_test_reordered)\n",
        "test_predictions_non_negative = np.maximum(0, test_predictions)\n",
        "if np.sum(test_predictions < 0) > 0: print(\"Note: Negative predictions clipped.\")\n",
        "\n",
        "print(\"Prediction on test set complete.\")\n",
        "test_prep_total_time = time.time() - test_prep_start_time\n",
        "print(f\"\\n[{test_prep_total_time:.1f}s] Cell 16 processing finished.\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f0b01330",
      "metadata": {
        "id": "f0b01330"
      },
      "source": [
        "## 9. Generate Submission File\n",
        "\n",
        "Create the final submission file in the format required by Zindi: a CSV file with two columns, `ID` and `kwh`. The `ID` column must match the `SampleSubmission.csv`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 68,
      "id": "4dba38c1",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4dba38c1",
        "outputId": "a8b2894d-29e6-4838-88c4-7990c0f55597"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Generating submission file...\n",
            "\n",
            "--- Submission File Head ---\n",
            "                                          ID       kwh\n",
            "0  2024-09-24_consumer_device_12_data_user_1  0.016091\n",
            "1  2024-09-25_consumer_device_12_data_user_1  0.015472\n",
            "2  2024-09-26_consumer_device_12_data_user_1  0.015472\n",
            "3  2024-09-27_consumer_device_12_data_user_1  0.015465\n",
            "4  2024-09-28_consumer_device_12_data_user_1  0.016091\n",
            "\n",
            "Submission file saved successfully as: submission_v6_lags_roll_userid.csv\n",
            "File shape: (6014, 2)\n",
            "Row count matches SampleSubmission.csv.\n"
          ]
        }
      ],
      "source": [
        "# Cell 18: Generate Submission File (Revised Filename)\n",
        "\n",
        "print(\"Generating submission file...\")\n",
        "\n",
        "submission_df = pd.DataFrame({'ID': test_df_final['ID'], 'kwh': test_predictions_non_negative})\n",
        "\n",
        "# Define the submission filename - V4 with Lags, Rolling, UserID\n",
        "submission_filename = 'submission_v6_lags_roll_userid.csv' # <<<--- CHANGED FILENAME ---<<<\n",
        "\n",
        "submission_df.to_csv(submission_filename, index=False)\n",
        "\n",
        "print(\"\\n--- Submission File Head ---\")\n",
        "print(submission_df.head())\n",
        "print(f\"\\nSubmission file saved successfully as: {submission_filename}\")\n",
        "print(f\"File shape: {submission_df.shape}\")\n",
        "\n",
        "if len(submission_df) == len(sample_sub): print(\"Row count matches SampleSubmission.csv.\")\n",
        "else: print(f\"WARNING: Row count mismatch! Submission: {len(submission_df)}, SampleSub: {len(sample_sub)}.\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "5cc93c28",
      "metadata": {
        "id": "5cc93c28"
      },
      "source": [
        "--- End of Baseline Notebook ---\n",
        "\n",
        "Next steps:\n",
        "- Submit the generated CSV to Zindi.\n",
        "- Analyze the results (local RMSE vs Zindi score).\n",
        "- Improve the model by:\n",
        "    - Adding more features (lags, rolling windows, user features).\n",
        "    - Tuning hyperparameters (e.g., using Optuna).\n",
        "    - Trying different models (XGBoost, CatBoost).\n",
        "    - Implementing more robust validation (Time Series Cross-Validation).\n",
        "    - Ensembling models."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# TEMPORARY CELL FOR GIT OPERATIONS - DELETE OUTPUT/CELL AFTER USE\n",
        "\n",
        "import os\n",
        "\n",
        "# --- 1. Clone (only if needed / runtime restarted) ---\n",
        "# Check if repo exists, clone only if necessary\n",
        "repo_name = \"zindi-mhp-energy-prediction-2025\"\n",
        "repo_path = os.path.join('/content', repo_name)\n",
        "\n",
        "if not os.path.exists(repo_path):\n",
        "    print(f\"Repository '{repo_name}' not found. Cloning...\")\n",
        "    # Replace with your PAT!\n",
        "    !git clone https://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@github.com/daveAnalyst/zindi-mhp-energy-prediction-2025.git\n",
        "    if not os.path.exists(repo_path): # Check again after clone attempt\n",
        "         print(\"--- ERROR: Clone failed! Cannot proceed with Git operations. ---\")\n",
        "         # Stop here if clone failed\n",
        "         raise RuntimeError(\"Git clone failed\")\n",
        "else:\n",
        "    print(f\"Repository '{repo_name}' already exists.\")\n",
        "\n",
        "# --- 2. Change Directory ---\n",
        "current_dir = os.getcwd()\n",
        "if os.path.basename(current_dir) != repo_name:\n",
        "    print(f\"Changing directory to: {repo_path}\")\n",
        "    os.chdir(repo_path)\n",
        "print(f\"Current directory: {os.getcwd()}\")\n",
        "\n",
        "\n",
        "# --- 3. Configure Git User (Important for commit history) ---\n",
        "# Replace with your actual email and name used on GitHub\n",
        "!git config --global user.email \"daveAnalyst@example.com\" #<-- YOUR GITHUB EMAIL\n",
        "!git config --global user.name \"DaveAnalyst\" #<-- YOUR GITHUB NAME/USERNAME\n",
        "\n",
        "\n",
        "# --- 4. Check Status (Optional but recommended) ---\n",
        "print(\"\\n--- Git Status ---\")\n",
        "!git status\n",
        "\n",
        "\n",
        "# --- 5. Add Files ---\n",
        "# Add the main notebook and any generated submission files etc.\n",
        "print(\"\\n--- Adding files ---\")\n",
        "!git add zindi_mhp_dev.ipynb submission_*.csv requirements.txt # Adjust as needed\n",
        "# Or use !git add . cautiously\n",
        "\n",
        "\n",
        "# --- 6. Commit ---\n",
        "commit_message = \"Update from Colab: Added lag/rolling features, generated submission v2\" #<-- CHANGE COMMIT MESSAGE\n",
        "print(f\"\\n--- Committing with message: '{commit_message}' ---\")\n",
        "!git commit -m \"{commit_message}\"\n",
        "\n",
        "\n",
        "# --- 7. Push ---\n",
        "print(\"\\n--- Pushing to GitHub ---\")\n",
        "# This assumes the clone URL included the PAT or you have other auth set up\n",
        "# If the clone URL didn't have PAT, this might prompt for username/PAT password\n",
        "!git push origin main # Or your default branch name\n",
        "\n",
        "\n",
        "print(\"\\n--- Git operations complete ---\")"
      ],
      "metadata": {
        "id": "hajGHazbqwMU",
        "outputId": "4f886122-ff3a-461a-8502-8d7b9a964796",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "id": "hajGHazbqwMU",
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Repository 'zindi-mhp-energy-prediction-2025' not found. Cloning...\n",
            "Cloning into 'zindi-mhp-energy-prediction-2025'...\n",
            "remote: Enumerating objects: 10, done.\u001b[K\n",
            "remote: Counting objects: 100% (10/10), done.\u001b[K\n",
            "remote: Compressing objects: 100% (10/10), done.\u001b[K\n",
            "remote: Total 10 (delta 3), reused 4 (delta 0), pack-reused 0 (from 0)\u001b[K\n",
            "Receiving objects: 100% (10/10), 61.30 KiB | 1.46 MiB/s, done.\n",
            "Resolving deltas: 100% (3/3), done.\n",
            "Changing directory to: /content/zindi-mhp-energy-prediction-2025\n",
            "Current directory: /content/zindi-mhp-energy-prediction-2025\n",
            "\n",
            "--- Git Status ---\n",
            "On branch master\n",
            "Your branch is up to date with 'origin/master'.\n",
            "\n",
            "nothing to commit, working tree clean\n",
            "\n",
            "--- Adding files ---\n",
            "fatal: pathspec 'submission_*.csv' did not match any files\n",
            "\n",
            "--- Committing with message: 'Update from Colab: Added lag/rolling features, generated submission v2' ---\n",
            "On branch master\n",
            "Your branch is up to date with 'origin/master'.\n",
            "\n",
            "nothing to commit, working tree clean\n",
            "\n",
            "--- Pushing to GitHub ---\n",
            "error: src refspec main does not match any\n",
            "\u001b[31merror: failed to push some refs to 'https://github.com/daveAnalyst/zindi-mhp-energy-prediction-2025.git'\n",
            "\u001b[m\n",
            "--- Git operations complete ---\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "repo_name = \"zindi-mhp-energy-prediction-2025\" # Make sure this matches your repo folder name\n",
        "\n",
        "# Check if we are already in the repo directory, if not, change into it\n",
        "current_dir = os.getcwd()\n",
        "print(f\"Current directory before check: {current_dir}\")\n",
        "if os.path.basename(current_dir) != repo_name:\n",
        "    repo_path = os.path.join('/content', repo_name) # Assuming it was cloned into /content\n",
        "    if os.path.exists(repo_path):\n",
        "        print(f\"Changing directory to: {repo_path}\")\n",
        "        os.chdir(repo_path)\n",
        "    else:\n",
        "        print(f\"ERROR: Repository path '{repo_path}' does not exist. Did the clone succeed?\")\n",
        "        # You might need to re-run the !git clone cell if the folder is missing\n",
        "\n",
        "# Now verify the directory again and run git status\n",
        "print(f\"Current directory now: {os.getcwd()}\")\n",
        "print(\"\\n--- Git Status ---\")\n",
        "!git status"
      ],
      "metadata": {
        "id": "0v2ByoCJqxfx",
        "outputId": "a9edb49b-b8fa-4f21-d7b2-c6fff7b61537",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "id": "0v2ByoCJqxfx",
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Current directory before check: /content\n",
            "ERROR: Repository path '/content/zindi-mhp-energy-prediction-2025' does not exist. Did the clone succeed?\n",
            "Current directory now: /content\n",
            "\n",
            "--- Git Status ---\n",
            "fatal: not a git repository (or any of the parent directories): .git\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "zindi_mhp_venv",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.9"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}